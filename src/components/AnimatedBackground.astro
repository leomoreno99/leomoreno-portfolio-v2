<div
  id="animate-bkg"
  class="absolute overflow-hidden -z-20 pointer-events-none bottom-0 left-0 right-0 top-0 h-svh bg-gradient-to-br from-purple-700 to-blue-900 mix-blend-color-dodge"
>
  <div
    class="opacity-5 -z-0 mix-blend-multiply bg-repeat-round absolute pointer-events-none bottom-0 left-0 right-0 top-0 h-svh bg-[url('/public/noise.webp')] bg-[length:18%_18%]"
  >
  </div>
</div>

<style>
  #animate-bkg {
    filter: hue-rotate(356deg);
  }
</style>

<script>
  import {
    EffectComposer,
    RenderPass,
    KawaseBlurPass,
    KernelSize,
  } from "postprocessing";
  import { WebGLRenderer, Scene, PerspectiveCamera, Color, Mesh, CircleGeometry, MeshBasicMaterial, Vector2, Vector3 } from "three";

  const animateBkg = document.querySelector<HTMLDivElement>("#animate-bkg")!;
  const renderer = new WebGLRenderer({
    powerPreference: "high-performance",
    antialias: true,
    stencil: false,
    depth: false,
  });

  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setClearColor(0x000000, 0);
  animateBkg.appendChild(renderer.domElement);

  const scene = new Scene();
  const camera = new PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    50,
  );
  camera.position.z = 10;

  const colors = [
    new Color(221 / 255, 74 / 255, 255 / 255),
    new Color(255 / 255, 74 / 255, 255 / 255),
    new Color(255 / 255, 255 / 255, 255 / 255),
    new Color(1 / 255, 20 / 255, 255 / 255),
    new Color(1 / 255, 20 / 255, 255 / 255),
  ];

  const circles: Mesh[] = [];
  const speed = 0.02;
  const screenBounds = {
    x: (window.innerWidth / window.innerHeight) * 4,
    y: 4,
  };
  let lastScrollY = 0;
  let scrollDelta = 0;
  const mouse = new Vector3(0, 0, 0);

  colors.forEach((color) => {
    const circleGeometry = new CircleGeometry(
      window.innerHeight / 450,
      64,
    );
    const material = new MeshBasicMaterial({
      color,
      transparent: true,
      opacity: 0.8,
    });
    const circle = new Mesh(circleGeometry, material);

    circle.position.set(
      Math.random() * screenBounds.x * 2 - screenBounds.x,
      Math.random() * screenBounds.y * 2 - screenBounds.y,
      Math.random() * 5,
    );

    circle.userData.velocity = new Vector2(
      (Math.random() - 0.1) * speed,
      (Math.random() - 0.1) * speed,
    );

    scene.add(circle);
    circles.push(circle);
  });

  const composer = new EffectComposer(renderer);
  composer.addPass(new RenderPass(scene, camera));

  const createBlurPass = (kernelSize: KernelSize, scale: number) =>
    new KawaseBlurPass({
      resolutionY: 480,
      kernelSize,
      resolutionScale: scale,
    });

  const blurPasses = [];
  const contBlurPasses = window.innerWidth >= 768 ? 2 : 1;

  for (let i = 0; i < contBlurPasses; i++) {
    blurPasses.push(createBlurPass(KernelSize.HUGE, 0.1));
  }
  blurPasses.forEach((pass) => composer.addPass(pass));

  const updateEventListeners = () => {
    if (window.innerWidth >= 768) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("scroll", handleScroll);
    } else {
      window.removeEventListener("mousemove", handleMouseMove);
      window.addEventListener("scroll", handleScroll);
    }
  };

  const handleMouseMove = (event: MouseEvent) => {
    const x = (event.clientX / window.innerWidth) * 2 - 1;
    const y = -(event.clientY / window.innerHeight) * 2 + 1;
    mouse.set(x * screenBounds.x, y * screenBounds.y, 0);
  };

  const handleScroll = () => {
    const scrollY = window.scrollY;
    scrollDelta = scrollY - lastScrollY;
    lastScrollY = scrollY;
  };

  window.addEventListener("resize", updateEventListeners);
  updateEventListeners();

  requestAnimationFrame(function render() {
    requestAnimationFrame(render);

    circles.forEach((circle, index) => {
      if (window.innerWidth >= 768) {
        const direction = new Vector2(
          mouse.x - circle.position.x,
          mouse.y - circle.position.y,
        );

        const distance = direction.length();

        if (distance < 2) {
          direction.normalize();
          circle.userData.velocity.add(direction.multiplyScalar(0.004));
        }
      }
      circle.userData.velocity.y += scrollDelta * 0.0002;

      if (
        Math.abs(circle.userData.velocity.x) > 0.007 ||
        Math.abs(circle.userData.velocity.y) > 0.007
      ) {
        circle.userData.velocity.multiplyScalar(0.99);
      }

      circle.position.x += circle.userData.velocity.x;
      circle.position.y += circle.userData.velocity.y;

      if (
        circle.position.x > screenBounds.x ||
        circle.position.x < -screenBounds.x
      ) {
        circle.userData.velocity.x *= -1;
      }
      if (
        circle.position.y > screenBounds.y ||
        circle.position.y < -screenBounds.y
      ) {
        circle.userData.velocity.y *= -1;
      }

      scrollDelta *= 0.9;
    });

    composer.render();
  });
</script>
